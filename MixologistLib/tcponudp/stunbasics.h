/****************************************************************
 *  Copyright 2010, Fair Use, Inc.
 *  Copyright 2007-8, Robert Fernie
 *
 *  This file is part of the Mixologist.
 *
 *  The Mixologist is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  The Mixologist is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Mixologist; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
 ****************************************************************/

#ifndef STUN_BASICS_H
#define STUN_BASICS_H

#include "util/net.h"
#include <QString>

/* Reads the packet, and returns true if it is such a UDP STUN packet. */
bool UdpStun_isStunRequest(void *data, int size);
bool UdpStun_isStunResponse(void *data, int size);

/* Reads the STUN request packet.
   sendResponseToAddr should contain the address from where it was received, and if there was a response-port attribute,
   then this will be updated with the port contained therein.
   Returns false if not a STUN response packet or sendResponseToAddr couldn't be populated. */
bool UdpStun_request(void *stun_pkt, int size, QString &transaction_id, struct sockaddr_in &sendResponseToAddr);

/* Reads the STUN response packet, and populates addr with the information from the packet in netbyteorder.
   Returns false if not a STUN response packet or addr couldn't be populated. */
bool UdpStun_response(void *stun_pkt, int size, QString &transaction_id, struct sockaddr_in &addr);

/* On the first call, generates a random 96-bit number stored in a QString in a base-16 representation.
   On subsequent calls, simply returns +1 increments from that number. */
QString UdpStun_generate_transaction_id();

/* Generates a STUN request packet into the memory passed to it by stun_pkt.
   transaction_id is the 12 hexadecimal digits that will represent the transaction ID in the new packet.
   This memory must have length len at least 20 in order to fit the stun packet.
   It is possible to have a memory space larger than 20 and to later use the extra space to append STUN attributes. */
bool UdpStun_generate_stun_request(void *stun_pkt, int len, const QString &transaction_id);

/* Takes an existing STUN request packet generated by UdpStun_generate_stun_request, and adds the Response-Port attribute.
   Not compatible with STUN request packets that have any pre-existing attributes.
   Updates the header value in the length to reflect this change. */
bool UdpStun_add_response_port_attribute(void *stun_pkt, int len, uint16_t port);

/* Allocates memory for and returns a pointer for a new STUN response packet to stun_addr, with length len. */
void* UdpStun_generate_stun_response(struct sockaddr_in *stun_addr, int *len, const QString &transaction_id);

#endif //STUN_BASICS_H
